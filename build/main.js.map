{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport ModbusRTU from 'modbus-serial';\nimport {protocol} from './protocol';\n\nclass WrGoodweMt extends utils.Adapter {\n    private client = new ModbusRTU();\n    private ids: number[] = [];\n    private iList = new Map<number,string>();\n\n    private sleep = (ms:any) => new Promise(resolve => setTimeout(resolve, ms));\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'wr-goodwe-mt',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        this.ids = new Array(this.config.endID-this.config.startID+1);\n        this.log.debug(\"Start ID:\" + String(this.config.startID));\n        this.log.debug(\"End ID:\" + String(this.config.endID));\n        this.setState('info.connection', false, true);\n\n        this.client.connectRTUBuffered(this.config.Interface, { baudRate: 9600 , parity: 'none', dataBits: 8, stopBits: 1, });\n        await this.client.setTimeout(10000);\n        await this.sleep(2000);\n        for(var i = this.config.startID; i <=this.config.endID; i++){\n            this.ids[i-this.config.startID] = i;\n            try{\n                await this.client.setID(i);\n                const val =  await this.client.readHoldingRegisters(protocol.Read.Adresses[0].Register[0], protocol.Read.Adresses[0].Register.length);\n                this.log.error(String(val.buffer));\n                this.iList.set(i,String(val.buffer));\n                if(val.buffer!=undefined){\n                    await this.setObjectNotExistsAsync(String(this.iList.get(i)), {\n                        type: 'channel',\n                        common: {\n                        name: String(this.iList.get(i)),\n                        },\n                        native: {},\n                    });\n            }\n            } catch(e: any){\n                this.log.error(\"ID: \"+i+\": \"+String(e.message));\n            }\n        }\n        await this.startComm();\n\n        let objects = ['DC_Power_Limitation_DirectMarketer', 'DC_Power_Limitation_GridOperator', 'DC_Power_Limitation_GP_Protection']\n\n        for(let i = 0; i < objects.length; i++){\n            await this.setObjectNotExistsAsync(objects[i], {\n                type: 'state',\n                common: {\n                    name: objects[i],\n                    type: 'number',\n                    role: 'indicator',\n                    read: true,\n                    unit: '%',\n                    write: true,\n                },\n                native: {},\n            });\n            await this.setState(objects[i], 100);\n        }\n\n        await this.setObjectNotExistsAsync('Reactive_Power_Limitation_GridOperator', {\n            type: 'state',\n            common: {\n                name: objects[i],\n                type: 'number',\n                role: 'indicator',\n                read: true,\n                unit: '%',\n                write: true,\n            },\n            native: {},\n        });\n        await this.setState('Reactive_Power_Limitation_GridOperator', 0);\n\n        await this.setObjectNotExistsAsync('Plant_ID', {\n            type: 'state',\n            common: {\n                name: 'Plant_ID',\n                type: 'string',\n                role: 'indicator',\n                read: true,\n                unit: '',\n                write: true,\n            },\n            native: {},\n        });\n        await this.setState('Plant_ID', this.config.plantID);\n    }\n\n    private conversionUint32(arr: number[]): number{\n        let uint8bytes = Uint8Array.from(arr);\n        let dataview = new DataView(uint8bytes.buffer);\n        return  dataview.getUint32(0);\n    }\n\n    private conversionInt32(arr: number[]): number{\n        let uint8bytes = Uint8Array.from(arr);\n        let dataview = new DataView(uint8bytes.buffer);\n        return  dataview.getInt32(0);\n    }\n\n    private async read(register: number [], adressPosition: number):Promise<number>{\n        try{\n            var puffer: number [] = [];\n\n            for(var i = 0; i < register.length; i++){\n                const val =  await this.client.readHoldingRegisters(register[i], 1);\n                switch(protocol.Read.Adresses[adressPosition].Datatype){\n                    case 1: puffer[i] = Buffer.from([val.buffer[0],val.buffer[1]]).readUint16BE(0); break;\n                    case 2: puffer[i] = Buffer.from([val.buffer[0],val.buffer[1]]).readInt16BE(0);break;\n                    case 3: puffer[2*i] =  Buffer.from([(val.buffer[0])]).readUInt8(); puffer[2*i+1] =  Buffer.from([(val.buffer[1])]).readUInt8(); break; \n                    case 4: puffer[2*i] =  Buffer.from([(val.buffer[0])]).readUInt8(); puffer[2*i+1] =  Buffer.from([(val.buffer[1])]).readUInt8(); break;\n                    default: this.log.error(\"Not found\"); break;\n                }\n            }\n            switch(protocol.Read.Adresses[adressPosition].Datatype){\n                case 1: return puffer[0];\n                case 2: return puffer[0];\n                case 3: return this.conversionUint32(puffer); \n                case 4: return this.conversionInt32(puffer);\n                default: this.log.error(\"Not found\"); return -1;\n            }            \n        }\n        catch(e: any){\n            this.log.error(String(e.message));\n            return -1;\n        }\n    }\n\n    private async startComm():Promise<void>{\n        const metersIdList = this.ids;\n        const getMeterValue = async (id:number) => {\n            //await this.sleep(100);\n            for(let i = 1; i < protocol.Read.Adresses.length; i++){\n                if(this.iList.get(id)!= undefined){\n                    await this.setObjectNotExistsAsync(this.iList.get(id)+'.'+protocol.Read.Adresses[i].Name, {\n                        type: 'state',\n                        common: {\n                            name: protocol.Read.Adresses[i].Name,\n                            type: 'number',\n                            role: 'indicator',\n                            read: true,\n                            unit: protocol.Read.Adresses[i].Unit,\n                            write: true,\n                        },\n                        native: {},\n                    });\n                    await this.client.setID(id);\n                    const val = await this.read(protocol.Read.Adresses[i].Register, i);\n                    if(val != -1){\n                        await this.setState(String(this.iList.get(id))+'.'+protocol.Read.Adresses[i].Name, val*protocol.Read.Adresses[i].Factor);\n                    }\n                }\n            }\n            await this.limit_DC_Power();\n        }\n\n        const getMetersValue = async (meters:any) => {\n            try{\n                if(this.client.isOpen){\n                    this.setState('info.connection', true, true);\n                }\n                else{\n                    this.setState('info.connection', false, true);\n                }\n                for(const meter of meters) {\n                    await getMeterValue(meter);\n                }\n            } catch(e: any){\n            } finally {\n                setImmediate(() => {\n                    getMetersValue(metersIdList);\n                })\n            }\n        }\n        getMetersValue(metersIdList);\n    }\n\n    private async limit_DC_Power(): Promise<void> {\n\n        let objects = ['DC_Power_Limitation_DirectMarketer', 'DC_Power_Limitation_GridOperator', 'DC_Power_Limitation_GP_Protection']\n        let min = 100;\n        for(let i = 0; i < objects.length; i++){\n        this.getState(objects[i],  async (err, state) => {\n            if(typeof state?.val === 'number'){\n                try{\n                    if(state?.val<min){\n                        min = state?.val;\n                    }\n                }\n                catch(e:any){\n\n                }\n            }\n        });\n        }\n        await this.client.writeRegisters(protocol.Write.Adresses[0].Register[0],[min]);\n        await this.sleep(1000);\n    }\n\n    //prepared but not active\n    private async limit_Reactive_Power(): Promise<void> {\n\n        let objects = ['Reactive_Power_Limitation_GridOperator']\n        for(let i = 0; i < objects.length; i++){\n        this.getState(objects[i],  async (err, state) => {\n            if(typeof state?.val === 'number'){\n                try{\n                    await this.client.writeRegisters(protocol.Write.Adresses[0].Register[1],[state?.val]);\n                    await this.sleep(1000);\n                }\n                catch(e:any){\n\n                }\n            }\n        });\n        }\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.log.debug('vor schlie\u00DFen:'+String(this.client.isOpen))\n            await this.client.close(callback);\n            this.log.debug('nach schlie\u00DFen:'+String(this.client.isOpen))\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WrGoodweMt(options);\n} else {\n    (() => new WrGoodweMt())();\n}"],
  "mappings": "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",
  "names": ["ModbusRTU", "i"]
}
